// class %class_name%
//
// Automaticaly generated file
// Generated by: %USERNAME%
// Time: %TIMESTAMP%
// Path: %code_path%

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;

namespace %namespace%
{
    public class %class_name% : DataTable
    {
        private DbConnection _dbConnection = null;
        private DbDataAdapter _dbAdapter = null;
        private DbProviderFactory _dbFactory = null;
        private string _connectionString = null;

        public %class_name%(DbProviderFactory factory, DbConnection connection)
            : base("%table_name%")
        {
            this._dbFactory = factory;
            this._dbConnection = connection;
            this.GenerateUpdateDA();
        }

        public %class_name%(DbProviderFactory factory, string connectionString)
            : base("%table_name%")
        {
            this._dbFactory = factory;
            this._connectionString = connectionString;
            this.GenerateUpdateDA();
        }

        public %class_name%(DbProviderFactory factory)
            : base("%table_name%")
        {
            this.GenerateUpdateDA();
        }

        private DbConnection GetOpenConnection(string connectionString)
        {
            if (connectionString == null)
                throw new Exception("No connection string available");

            DbConnection connection = this._dbFactory.CreateConnection();
            connection.ConnectionString = connectionString;
            connection.Open();
            return connection;
        }

        private void SetDAConnection(DbConnection connection)
        {
            if (this._dbAdapter == null)
                return;
            this._dbAdapter.SelectCommand.Connection = connection;
            this._dbAdapter.UpdateCommand.Connection = connection;
            this._dbAdapter.InsertCommand.Connection = connection;
            this._dbAdapter.DeleteCommand.Connection = connection;
        }

        public int Save()
        {
            if (this._dbConnection != null)
            {
                this.SetDAConnection(this._dbConnection);
                return this._dbAdapter.Update(this);
            }
            else if (this._connectionString != null)
            {
                return this.Save(this._connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public int Save(string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            this.SetDAConnection(connection);
            int rows = this._dbAdapter.Update(this);
            connection.Close();
            return rows;
        }

        public int Save(DbConnection connection)
        {
            this.SetDAConnection(connection);
            return this._dbAdapter.Update(this);
        }

        public bool TableExists()
        {
            if (this._dbConnection != null)
            {
                return this.TableExists(this._dbConnection);
            }
            else if (this._connectionString != null)
            {
                return this.TableExists(this._connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public bool TableExists(string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            bool bRet = this.TableExists(connection);
            connection.Close();
            return bRet;
        }

        public bool TableExists(DbConnection connection)
        {
            DataTable dt = connection.GetSchema("TABLES", new string[] { "", "", "%table_name%" });
            if (dt.Rows.Count > 0)
                return true;
            return false;
        }

        public void CreateTable()
        {
            if (this._dbConnection != null)
            {
                this.CreateTable(this._dbConnection);
            }
            else if (this._connectionString != null)
            {
                this.CreateTable(this._connectionString);
            }
            else
                throw new Exception("No valid DB Connection");
        }

        public void CreateTable(string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            this.CreateTable(connection);
            connection.Close();
        }

		protected virtual string GetColumnSpecification()
		{
			return "(%column_specification%)";
		}
		
        public void CreateTable(DbConnection connection)
        {
            string sqlDrop = "DROP TABLE %table_name%";
            string sqlCreate = "CREATE TABLE %table_name% " + this.GetColumnSpecification();

            DbCommand commandDrop = this._dbFactory.CreateCommand();
            commandDrop.CommandText = sqlDrop;
            commandDrop.Connection = connection;

            DbCommand commandCreate = this._dbFactory.CreateCommand();
            commandCreate.CommandText = sqlCreate;
            commandCreate.Connection = connection;

            try
            {
                commandDrop.ExecuteNonQuery();
                commandDrop.Dispose();
            }
            catch (Exception)
            {
                commandDrop.Dispose();
            }

            commandCreate.ExecuteNonQuery();
            commandCreate.Dispose();
        }

        public void TruncateTable()
        {
            if (this._dbConnection != null)
            {
                this.TruncateTable(this._dbConnection);
            }
            else if (this._connectionString != null)
            {
                this.TruncateTable(this._connectionString);
            }
            else
                throw new Exception("No valid DB Connection");
        }

        public void TruncateTable(string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            this.TruncateTable(connection);
            connection.Close();
        }

        public void TruncateTable(DbConnection connection)
        {
            string sqlTruncate = "DELETE FROM %table_name%";
            DbCommand commandTruncate = this._dbFactory.CreateCommand();
            commandTruncate.Connection = connection;
            commandTruncate.CommandText = sqlTruncate;
            commandTruncate.ExecuteNonQuery();
            commandTruncate.Dispose();
        }

        public %row_class_name% NewDBRow()
        {
            return (%row_class_name%)base.NewRow();
        }

        protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
        {
            return new %row_class_name%(builder);
        }

        public int FillQuery(string query)
        {
            if (this._dbConnection != null)
            {
                return this.FillQuery(query, this._dbConnection);
            }
            else if (this._connectionString != null)
            {
                return this.FillQuery(query, this._connectionString);
            }

            throw new Exception("No valid SqliteConnection");
        }

        public int FillQuery(string query, string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            int iRet = this.FillQuery(query, connection);
            connection.Close();
            return iRet;
        }

        public int FillQuery(string query, DbConnection connection)
        {
            this.GenerateFillQueryDA(query);
            this.SetDAConnection(connection);
            return this._dbAdapter.Fill(this);
        }

        private void GenerateFillQueryDA(string query)
        {
            if (this._dbAdapter == null)
                this._dbAdapter = this._dbFactory.CreateDataAdapter();

            string selectQuery = "SELECT <%select_columns%>[ , ]%select_column% <%select_columns%>FROM %table_name%";

            if (query != null && query.Length > 0)
                selectQuery += " WHERE " + query;

            if (this._dbAdapter.SelectCommand != null)
                this._dbAdapter.SelectCommand.Dispose();

            this._dbAdapter.SelectCommand = this._dbFactory.CreateCommand();
            this._dbAdapter.SelectCommand.CommandText = selectQuery;
        }

        private void GenerateUpdateDA()
        {
            if (this._dbAdapter == null)
                this._dbAdapter = this._dbFactory.CreateDataAdapter();


            if (this._dbAdapter.UpdateCommand != null)
                this._dbAdapter.UpdateCommand.Dispose();

            this._dbAdapter.UpdateCommand = this._dbFactory.CreateCommand();
            this._dbAdapter.UpdateCommand.CommandText = "UPDATE %table_name% SET <%update_columns%>[ , ]%update_column% = @%update_column%<%update_columns%> WHERE <%key_columns%>[ AND ]%key_column% = @w_%key_column%<%key_columns%>";

            <%update_columns%>
            DbParameter %update_column%UpdateParam = this._dbFactory.CreateParameter();
            %update_column%UpdateParam.ParameterName = "@%update_column%";
            %update_column%UpdateParam.SourceColumn = "%update_column%";
            %update_column%UpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            this._dbAdapter.UpdateCommand.Parameters.Add(%update_column%UpdateParam);
            <%update_columns%>
            
            <%key_columns%>
            DbParameter %key_column%UpdateParam = this._dbFactory.CreateParameter();
            %key_column%UpdateParam.ParameterName = "@w_%key_column%";
            %key_column%UpdateParam.SourceColumn = "%key_column%";
            %key_column%UpdateParam.SourceVersion = System.Data.DataRowVersion.Original;
            this._dbAdapter.UpdateCommand.Parameters.Add(%key_column%UpdateParam);
            <%key_columns%>

            if (this._dbAdapter.DeleteCommand != null)
                this._dbAdapter.DeleteCommand.Dispose();

            this._dbAdapter.DeleteCommand = this._dbFactory.CreateCommand();
            this._dbAdapter.DeleteCommand.CommandText = "DELETE FROM %table_name% WHERE <%key_columns%>[ AND ]%key_column% = @w_%key_column%<%key_columns%>";

            <%key_columns%>
            DbParameter %key_column%DeleteParam = this._dbFactory.CreateParameter();
            %key_column%DeleteParam.ParameterName = "@w_%key_column%";
            %key_column%DeleteParam.SourceColumn = "%key_column%";
            %key_column%DeleteParam.SourceVersion = System.Data.DataRowVersion.Original;
            this._dbAdapter.DeleteCommand.Parameters.Add(%key_column%DeleteParam);
            <%key_columns%>

            if (this._dbAdapter.InsertCommand != null)
                this._dbAdapter.InsertCommand.Dispose();

            this._dbAdapter.InsertCommand = this._dbFactory.CreateCommand();
            this._dbAdapter.InsertCommand.CommandText = "INSERT INTO %table_name% (<%insert_columns%>[ , ]%insert_column%<%insert_columns%>) VALUES(<%insert_columns%>[ , ]@%insert_column%<%insert_columns%>)";

            <%insert_columns%>
            DbParameter %insert_column%InsertParam = this._dbFactory.CreateParameter();
            %insert_column%InsertParam.ParameterName = "@%insert_column%";
            %insert_column%InsertParam.SourceColumn = "%insert_column%";
            %insert_column%InsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            this._dbAdapter.InsertCommand.Parameters.Add(%insert_column%InsertParam);
            <%insert_columns%>
        }

        public int FillKeys(<%key_columns%>[, ]%key_type% %key_column%<%key_columns%>)
        {
            if (this._dbConnection != null)
            {
                return this.FillKeys(<%key_columns%>[, ]%key_column%<%key_columns%>, this._dbConnection);
            }
            else if (this._connectionString != null)
            {
                return this.FillKeys(<%key_columns%>[, ]%key_column%<%key_columns%>, this._connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public int FillKeys(<%key_columns%>[, ]%key_type% %key_column%<%key_columns%>, string connectionString)
        {
            DbConnection connection = this.GetOpenConnection(connectionString);
            int iRet = this.FillKeys(<%key_columns%>[, ]%key_column%<%key_columns%>, connection);
            connection.Close();
            return iRet;
        }

        public int FillKeys(<%key_columns%>[, ]%key_type% %key_column%<%key_columns%>, DbConnection connection)
        {
            this.GenerateFillKeyDA(<%key_columns%>[, ]%key_column%<%key_columns%>);
            this.SetDAConnection(connection);
            return this._dbAdapter.Fill(this);
        }

        private void GenerateFillKeyDA(<%key_columns%>[, ]%key_type% %key_column%<%key_columns%>)
        {
            if (this._dbAdapter == null)
                this._dbAdapter = this._dbFactory.CreateDataAdapter();

            string selectQuery = "SELECT <%select_columns%>[, ]%select_column%<%select_columns%> FROM %table_name% WHERE <%key_columns%>[ AND ]%key_column% = @w_%key_column%<%key_columns%>";
            if (this._dbAdapter.SelectCommand != null)
                this._dbAdapter.SelectCommand.Dispose();

            this._dbAdapter.SelectCommand = this._dbFactory.CreateCommand();
            this._dbAdapter.SelectCommand.CommandText = selectQuery;

            <%key_columns%>
            DbParameter %key_column%SelectParam = this._dbFactory.CreateParameter();
            %key_column%SelectParam.ParameterName = "@w_%key_column%";
            %key_column%SelectParam.Value = %key_column%;
            this._dbAdapter.SelectCommand.Parameters.Add(%key_column%SelectParam);
            <%key_columns%>
        }
    }
}
