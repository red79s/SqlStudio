// class ColumnCacheDataTableBase
//
// Automaticaly generated file
// Generated by: AGRUSERS\bard.hustveit
// Time: 20.04.2007
// Path: D:\dev\src\utils\SqlStudio\SqlExecute\DbSchemaCache

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;

namespace SqlExecute.DbSchemaCache
{
    public class ColumnCacheDataTableBase : DataTable
    {
        private DbConnection _dbConnection = null;
        private DbDataAdapter _dbAdapter = null;
        private DbProviderFactory _dbFactory = null;
        private string _connectionString = null;

        public ColumnCacheDataTableBase(DbProviderFactory factory, DbConnection connection)
            : base("column_cache")
        {
            _dbFactory = factory;
            _dbConnection = connection;
            GenerateUpdateDA();
        }

        public ColumnCacheDataTableBase(DbProviderFactory factory, string connectionString)
            : base("column_cache")
        {
            _dbFactory = factory;
            _connectionString = connectionString;
            GenerateUpdateDA();
        }

        public ColumnCacheDataTableBase(DbProviderFactory factory)
            : base("column_cache")
        {
            GenerateUpdateDA();
        }

        private DbConnection GetOpenConnection(string connectionString)
        {
            if (connectionString == null)
                throw new Exception("No connection string available");

            DbConnection connection = _dbFactory.CreateConnection();
            connection.ConnectionString = connectionString;
            connection.Open();
            return connection;
        }

        private void SetDAConnection(DbConnection connection)
        {
            if (_dbAdapter == null)
                return;
            _dbAdapter.SelectCommand.Connection = connection;
            _dbAdapter.UpdateCommand.Connection = connection;
            _dbAdapter.InsertCommand.Connection = connection;
            _dbAdapter.DeleteCommand.Connection = connection;
        }

        public int Save()
        {
            if (_dbConnection != null)
            {
                SetDAConnection(_dbConnection);
                return _dbAdapter.Update(this);
            }
            else if (_connectionString != null)
            {
                return Save(_connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public int Save(string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            SetDAConnection(connection);
            int rows = _dbAdapter.Update(this);
            connection.Close();
            return rows;
        }

        public int Save(DbConnection connection)
        {
            SetDAConnection(connection);
            return _dbAdapter.Update(this);
        }

        public bool TableExists()
        {
            if (_dbConnection != null)
            {
                return TableExists(_dbConnection);
            }
            else if (_connectionString != null)
            {
                return TableExists(_connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public bool TableExists(string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            bool bRet = TableExists(connection);
            connection.Close();
            return bRet;
        }

        public bool TableExists(DbConnection connection)
        {
            DataTable dt = connection.GetSchema("TABLES", new string[] { "", "", "column_cache" });
            if (dt.Rows.Count > 0)
                return true;
            return false;
        }

        public void CreateTable()
        {
            if (_dbConnection != null)
            {
                CreateTable(_dbConnection);
            }
            else if (_connectionString != null)
            {
                CreateTable(_connectionString);
            }
            else
                throw new Exception("No valid DB Connection");
        }

        public void CreateTable(string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            CreateTable(connection);
            connection.Close();
        }

		protected virtual string GetColumnSpecification()
		{
			return "(table_name varchar(255), column_name varchar(255), ordinal_position integer, data_type varchar(255), column_length int, is_nullable bool, primary_key bool, PRIMARY KEY(table_name, column_name))";
		}
		
        public void CreateTable(DbConnection connection)
        {
            string sqlDrop = "DROP TABLE column_cache";
            string sqlCreate = "CREATE TABLE column_cache " + GetColumnSpecification();

            DbCommand commandDrop = _dbFactory.CreateCommand();
            commandDrop.CommandText = sqlDrop;
            commandDrop.Connection = connection;

            DbCommand commandCreate = _dbFactory.CreateCommand();
            commandCreate.CommandText = sqlCreate;
            commandCreate.Connection = connection;

            try
            {
                commandDrop.ExecuteNonQuery();
                commandDrop.Dispose();
            }
            catch (Exception)
            {
                commandDrop.Dispose();
            }

            commandCreate.ExecuteNonQuery();
            commandCreate.Dispose();
        }

        public void TruncateTable()
        {
            if (_dbConnection != null)
            {
                TruncateTable(_dbConnection);
            }
            else if (_connectionString != null)
            {
                TruncateTable(_connectionString);
            }
            else
                throw new Exception("No valid DB Connection");
        }

        public void TruncateTable(string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            TruncateTable(connection);
            connection.Close();
        }

        public void TruncateTable(DbConnection connection)
        {
            string sqlTruncate = "DELETE FROM column_cache";
            DbCommand commandTruncate = _dbFactory.CreateCommand();
            commandTruncate.Connection = connection;
            commandTruncate.CommandText = sqlTruncate;
            commandTruncate.ExecuteNonQuery();
            commandTruncate.Dispose();
        }

        public ColumnCacheDataRow NewDBRow()
        {
            return (ColumnCacheDataRow)base.NewRow();
        }

        protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
        {
            return new ColumnCacheDataRow(builder);
        }

        public int FillQuery(string query)
        {
            if (_dbConnection != null)
            {
                return FillQuery(query, _dbConnection);
            }
            else if (_connectionString != null)
            {
                return FillQuery(query, _connectionString);
            }

            throw new Exception("No valid SqliteConnection");
        }

        public int FillQuery(string query, string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            int iRet = FillQuery(query, connection);
            connection.Close();
            return iRet;
        }

        public int FillQuery(string query, DbConnection connection)
        {
            GenerateFillQueryDA(query);
            SetDAConnection(connection);
            return _dbAdapter.Fill(this);
        }

        private void GenerateFillQueryDA(string query)
        {
            if (_dbAdapter == null)
                _dbAdapter = _dbFactory.CreateDataAdapter();

            string selectQuery = "SELECT table_name  , column_name  , ordinal_position  , data_type , column_length , is_nullable  , primary_key FROM column_cache";

            if (query != null && query.Length > 0)
                selectQuery += " WHERE " + query;

            if (_dbAdapter.SelectCommand != null)
                _dbAdapter.SelectCommand.Dispose();

            _dbAdapter.SelectCommand = _dbFactory.CreateCommand();
            _dbAdapter.SelectCommand.CommandText = selectQuery;
        }

        private void GenerateUpdateDA()
        {
            if (_dbAdapter == null)
                _dbAdapter = _dbFactory.CreateDataAdapter();


            if (_dbAdapter.UpdateCommand != null)
                _dbAdapter.UpdateCommand.Dispose();

            _dbAdapter.UpdateCommand = _dbFactory.CreateCommand();
            _dbAdapter.UpdateCommand.CommandText = "UPDATE column_cache SET ordinal_position = @ordinal_position , data_type = @data_type , column_length = @column_length,is_nullable = @is_nullable , primary_key = @primary_key WHERE table_name = @w_table_name AND column_name = @w_column_name";

            
            DbParameter ordinal_positionUpdateParam = _dbFactory.CreateParameter();
            ordinal_positionUpdateParam.ParameterName = "@ordinal_position";
            ordinal_positionUpdateParam.SourceColumn = "ordinal_position";
            ordinal_positionUpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.UpdateCommand.Parameters.Add(ordinal_positionUpdateParam);
            
            DbParameter data_typeUpdateParam = _dbFactory.CreateParameter();
            data_typeUpdateParam.ParameterName = "@data_type";
            data_typeUpdateParam.SourceColumn = "data_type";
            data_typeUpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.UpdateCommand.Parameters.Add(data_typeUpdateParam);

            DbParameter column_lengthUpdateParam = _dbFactory.CreateParameter();
            column_lengthUpdateParam.ParameterName = "@column_length";
            column_lengthUpdateParam.SourceColumn = "column_length";
            column_lengthUpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.UpdateCommand.Parameters.Add(column_lengthUpdateParam);

            DbParameter is_nullableUpdateParam = _dbFactory.CreateParameter();
            is_nullableUpdateParam.ParameterName = "@is_nullable";
            is_nullableUpdateParam.SourceColumn = "is_nullable";
            is_nullableUpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.UpdateCommand.Parameters.Add(is_nullableUpdateParam);
            
            DbParameter primary_keyUpdateParam = _dbFactory.CreateParameter();
            primary_keyUpdateParam.ParameterName = "@primary_key";
            primary_keyUpdateParam.SourceColumn = "primary_key";
            primary_keyUpdateParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.UpdateCommand.Parameters.Add(primary_keyUpdateParam);
            
            
            
            DbParameter table_nameUpdateParam = _dbFactory.CreateParameter();
            table_nameUpdateParam.ParameterName = "@w_table_name";
            table_nameUpdateParam.SourceColumn = "table_name";
            table_nameUpdateParam.SourceVersion = System.Data.DataRowVersion.Original;
            _dbAdapter.UpdateCommand.Parameters.Add(table_nameUpdateParam);
            
            DbParameter column_nameUpdateParam = _dbFactory.CreateParameter();
            column_nameUpdateParam.ParameterName = "@w_column_name";
            column_nameUpdateParam.SourceColumn = "column_name";
            column_nameUpdateParam.SourceVersion = System.Data.DataRowVersion.Original;
            _dbAdapter.UpdateCommand.Parameters.Add(column_nameUpdateParam);
            

            if (_dbAdapter.DeleteCommand != null)
                _dbAdapter.DeleteCommand.Dispose();

            _dbAdapter.DeleteCommand = _dbFactory.CreateCommand();
            _dbAdapter.DeleteCommand.CommandText = "DELETE FROM column_cache WHERE table_name = @w_table_name AND column_name = @w_column_name";

            
            DbParameter table_nameDeleteParam = _dbFactory.CreateParameter();
            table_nameDeleteParam.ParameterName = "@w_table_name";
            table_nameDeleteParam.SourceColumn = "table_name";
            table_nameDeleteParam.SourceVersion = System.Data.DataRowVersion.Original;
            _dbAdapter.DeleteCommand.Parameters.Add(table_nameDeleteParam);
            
            DbParameter column_nameDeleteParam = _dbFactory.CreateParameter();
            column_nameDeleteParam.ParameterName = "@w_column_name";
            column_nameDeleteParam.SourceColumn = "column_name";
            column_nameDeleteParam.SourceVersion = System.Data.DataRowVersion.Original;
            _dbAdapter.DeleteCommand.Parameters.Add(column_nameDeleteParam);
            

            if (_dbAdapter.InsertCommand != null)
                _dbAdapter.InsertCommand.Dispose();

            _dbAdapter.InsertCommand = _dbFactory.CreateCommand();
            _dbAdapter.InsertCommand.CommandText = "INSERT INTO column_cache (table_name , column_name , ordinal_position , data_type , column_length, is_nullable , primary_key) VALUES(@table_name , @column_name , @ordinal_position , @data_type ,@column_length, @is_nullable , @primary_key)";

            
            DbParameter table_nameInsertParam = _dbFactory.CreateParameter();
            table_nameInsertParam.ParameterName = "@table_name";
            table_nameInsertParam.SourceColumn = "table_name";
            table_nameInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(table_nameInsertParam);
            
            DbParameter column_nameInsertParam = _dbFactory.CreateParameter();
            column_nameInsertParam.ParameterName = "@column_name";
            column_nameInsertParam.SourceColumn = "column_name";
            column_nameInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(column_nameInsertParam);
            
            DbParameter ordinal_positionInsertParam = _dbFactory.CreateParameter();
            ordinal_positionInsertParam.ParameterName = "@ordinal_position";
            ordinal_positionInsertParam.SourceColumn = "ordinal_position";
            ordinal_positionInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(ordinal_positionInsertParam);
            
            DbParameter data_typeInsertParam = _dbFactory.CreateParameter();
            data_typeInsertParam.ParameterName = "@data_type";
            data_typeInsertParam.SourceColumn = "data_type";
            data_typeInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(data_typeInsertParam);

            DbParameter column_lengthInsertParam = _dbFactory.CreateParameter();
            column_lengthInsertParam.ParameterName = "@column_length";
            column_lengthInsertParam.SourceColumn = "column_length";
            column_lengthInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(column_lengthInsertParam);

            DbParameter is_nullableInsertParam = _dbFactory.CreateParameter();
            is_nullableInsertParam.ParameterName = "@is_nullable";
            is_nullableInsertParam.SourceColumn = "is_nullable";
            is_nullableInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(is_nullableInsertParam);
            
            DbParameter primary_keyInsertParam = _dbFactory.CreateParameter();
            primary_keyInsertParam.ParameterName = "@primary_key";
            primary_keyInsertParam.SourceColumn = "primary_key";
            primary_keyInsertParam.SourceVersion = System.Data.DataRowVersion.Current;
            _dbAdapter.InsertCommand.Parameters.Add(primary_keyInsertParam);
            
        }

        public int FillKeys(string table_name, string column_name)
        {
            if (_dbConnection != null)
            {
                return FillKeys(table_name, column_name, _dbConnection);
            }
            else if (_connectionString != null)
            {
                return FillKeys(table_name, column_name, _connectionString);
            }

            throw new Exception("No valid DB Connection");
        }

        public int FillKeys(string table_name, string column_name, string connectionString)
        {
            DbConnection connection = GetOpenConnection(connectionString);
            int iRet = FillKeys(table_name, column_name, connection);
            connection.Close();
            return iRet;
        }

        public int FillKeys(string table_name, string column_name, DbConnection connection)
        {
            GenerateFillKeyDA(table_name, column_name);
            SetDAConnection(connection);
            return _dbAdapter.Fill(this);
        }

        private void GenerateFillKeyDA(string table_name, string column_name)
        {
            if (_dbAdapter == null)
                _dbAdapter = _dbFactory.CreateDataAdapter();

            string selectQuery = "SELECT table_name, column_name, ordinal_position, data_type, column_length, is_nullable, primary_key FROM column_cache WHERE table_name = @w_table_name AND column_name = @w_column_name";
            if (_dbAdapter.SelectCommand != null)
                _dbAdapter.SelectCommand.Dispose();

            _dbAdapter.SelectCommand = _dbFactory.CreateCommand();
            _dbAdapter.SelectCommand.CommandText = selectQuery;

            
            DbParameter table_nameSelectParam = _dbFactory.CreateParameter();
            table_nameSelectParam.ParameterName = "@w_table_name";
            table_nameSelectParam.Value = table_name;
            _dbAdapter.SelectCommand.Parameters.Add(table_nameSelectParam);
            
            DbParameter column_nameSelectParam = _dbFactory.CreateParameter();
            column_nameSelectParam.ParameterName = "@w_column_name";
            column_nameSelectParam.Value = column_name;
            _dbAdapter.SelectCommand.Parameters.Add(column_nameSelectParam);
            
        }
    }
}
